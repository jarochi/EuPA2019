\documentclass[final]{beamer}
\usepackage{grffile}
\mode<presentation>{\usetheme{CambridgeUSPOL}}

\usepackage[utf8]{inputenc}
\usepackage{amsfonts}
\usepackage{amsmath}
\usepackage{natbib}
\usepackage{polski}
\usepackage{graphicx}
\usepackage{array,booktabs,tabularx}
\usepackage{epstopdf}
\usepackage{colortbl, xcolor}
\newcolumntype{Z}{>{\centering\arraybackslash}X}

% rysunki
\usepackage{tikz}
\usepackage{ifthen}
\usepackage{xxcolor}
\usetikzlibrary{arrows}
\usetikzlibrary[topaths]
\usetikzlibrary{decorations.pathreplacing}
%\usepackage{times}\usefonttheme{professionalfonts}  % times is obsolete
\usefonttheme[onlymath]{serif}
\boldmath
\usepackage[orientation=portrait,size=a0,scale=1.4,debug]{beamerposter}                       % e.g. for DIN-A0 poster
%\usepackage[orientation=portrait,size=a1,scale=1.4,grid,debug]{beamerposter}                  % e.g. for DIN-A1 poster, with optional grid and debug output
%\usepackage[size=custom,width=200,height=120,scale=2,debug]{beamerposter}                     % e.g. for custom size poster
%\usepackage[orientation=portrait,size=a0,scale=1.0,printer=rwth-glossy-uv.df]{beamerposter}   % e.g. for DIN-A0 poster with rwth-glossy-uv printer check
% ...
%


\newlength{\columnheight}
\setlength{\columnheight}{85cm}
\renewcommand{\thetable}{}
\def\andname{,}
\authornote{}

\renewcommand{\APACrefatitle}[2]{}
\renewcommand{\bibliographytypesize}{\footnotesize} 
\renewcommand{\APACrefYearMonthDay}[3]{%
  {\BBOP}{#1}
  {\BBCP}
}

\begin{document}

<<knitrIntro, echo = FALSE, message=FALSE,warning=FALSE>>=
source("my_ggplot_theme.R")

library(dplyr)
library(reshape2)
library(xtable)
library(biogram)
library(ggplot2)
library(readODS)
library(ggplot2)
library(ggbeeswarm)
library(tidyverse)
library(DT)


@


\date{}
\author{\small Jaros\l{}aw Chilimoniuk{1}*,  Micha\l{} Burdukiewicz\inst{2}, Piotr Sobczyk\inst{3}, Stefan R\"{o}diger\inst{4}, \\Ma\l{}gorzata Kotulska\inst{5} and Pawe\l{} Mackiewicz\inst{1}\\
\normaltext{*jaroslaw.chilimoniuk@gmail.com} $\diamondsuit$ \normaltext{jarochi@github}}


\institute{\small{\textsuperscript{1}University of Wroc\l{}aw, Department of Bioinformatics and Genomics,
\textsuperscript{2}Warsaw University of Technology, Faculty of Mathematics and Information Science,
\textsuperscript{3}Wroc\l{}aw University of Science and Technology, Faculty of Pure and Applied Mathematics,
\textsuperscript{4}Brandenburg University of Technology Cottbus-Senftenberg, Institute of Biotechnology,
\textsuperscript{5}Wroc\l{}aw University of Science and Technology, Department of Biomedical Engineering
}
}

\title{\huge AmyloGram: prediction of amyloid sequences in R}

\begin{frame}
\begin{columns}
\begin{column}{.53\textwidth}
\begin{beamercolorbox}[center,wd=\textwidth]{postercolumn}
\begin{minipage}[T]{.95\textwidth}
\parbox[t][\columnheight]{\textwidth}
{
\begin{block}{Introduction}

% Amyloids are proteins associated with the number of clinical disorders (e.g., Alzheimer's, Creutzfeldt-Jakob's and Huntington's diseases). Despite their diversity, all amyloid proteins can undergo aggregation initiated by 6- to \mbox{15-residue} segments called hot spots. To find the patterns defining the hot-spots, we trained predictors of amyloidogenicity based on random forests using short subsequences (n-grams) extracted from amyloidogenic and non-amyloidogenic peptides collected in the AmyLoad database.

Aggregates of amyloid proteins are causes of neurodegenerative disorders. Using features that are easily to interpret, we trained a novel algorithm, AmyloGram, for detection of amyloids. In comparison to other methods predicting amyloids, our software achieved the highest performance. Additionally, we have experimentally confirmed that AmyloGram is able to detect false negatives (amyloid proteins wrongly annotated as non-amyloids) in its training data set.

    \end{block}

\begin{block}{Scheme}
\begin{figure} 
\includegraphics[width=0.85\columnwidth]{static_figure/ngram_scheme_poster.eps}
\end{figure}

    \end{block}


% \begin{block}{Results of cross-validation}
% 
% The amyloidogenicity of a given peptide may not depend on the exact sequence of 
% amino acids but on its more general properties. 
% Henceforth, we created 524,284 amino acid reduced alphabets (from three to six letters) based on physicochemical properties relevant to amyloidogenicity. 
% 
% Distribution of mean AUC values of classifiers with various encodings 
% for every possible combination of training and testing data set including 
% different lengths of sequences. 
% 
% <<echo = FALSE,message=FALSE,fig.align='center',fig.width=14,fig.height=6,warning=FALSE>>=
% amyloids_plot <- read.csv("amyloid_plot_data.csv")
% 
% ggplot(amyloids_plot, aes(x = len_range, y = AUC_mean)) +
%   geom_boxplot(outlier.color = "grey", outlier.shape = 1) +
%   geom_point(data = filter(amyloids_plot, et != "Encoding"), 
%              aes(x = len_range, y = AUC_mean, color = et, shape = et), size = 4) +
%   scale_x_discrete("") +
%   scale_y_continuous("Mean AUC") +
%   scale_shape_manual("", values = c(16, 1, 15, 15), drop = FALSE) +
%   scale_color_manual("", values = c("red", "grey", "green", "blue"), drop = FALSE) +
%   facet_wrap(~ pos, nrow = 3) +
%   my_theme +
%   coord_flip()
% @
% 
% \tiny
% The 
% gray circles correspond to the encodings with the AUC outside the 0.95 
% confidence interval.
% 
% \normalsize	
% \bigskip
% The predictor based on the best-performing encoding reached the highest AUC (0.8667) 
% in classification of the shortest sequences (with the length of 6 residues).
% 
% \bigskip
% 
% Classifiers based on the full (i.e., unreduced) amino acid alphabet never predicted 
% amyloidogenicity better than the best classifier based on the reduced alphabet. 
% 
% \bigskip
% 
% The standard encodings found in the literature performed worse than other 
% analyzed encodings in most categories.
% 
% \end{block}

% \vfill


% \begin{block}{Quick Permutation Test (QuiPT)}
%     Model and statistic independent permutation tests can be used to filter features obtained through counting n-grams.
%     
%     During a permutation test class labels are randomly exchanged during computation of a significance statistic. p-values are defined as:
%     
% \begin{center}
% \scalebox{0.85}{
% $      
% \textnormal{p-value} = \frac{N_{T_P > T_R}}{N}
% $
% }
% \end{center}
% 
% where $N_{T_P > T_R}$ is number of times when $T_P$ (permuted test statistic) was more extreme than $T_R$ (test statistic for non-permuted data).
% 
% Permutation tests are computationally expensive (especially considering precise estimation of small p-values, because the number of permutations is inversely proportional to the interval between p-values).
% 
% \medskip
% 
% \textbf{Qui}ck \textbf{P}ermutation \textbf{T}est (QuiPT) thanks to the unique parameterization replaces a permutation test with the exact two-sided Fisher's test~\citep{lehmann1986testing} reducing the computation cost. 
%       
%     \end{block}

\vfill

\begin{block}{Informative n-grams}
<<echo = FALSE,message=FALSE,fig.align='center',fig.width=15.5,fig.height=9.5,warning=FALSE>>=
ngram_freq <- read.csv("ngram_freq.csv")

gr_aa <- encoding2df(AmyloGram::AmyloGram_model[["enc"]]) %>% 
  mutate(element = as.character(element),
         element = toupper(element)) %>%  
  group_by(gr_id) %>% 
  summarise(gr = paste0("{", paste0(element, collapse = ""), "}")) 

ngram_freq_plot <- mutate(ngram_freq, decoded_name = gsub("_", "X", decoded_name)) %>%
  mutate(decoded_name = factor(decoded_name, levels = as.character(decoded_name)),
         amyloid = diff_freq > 0) %>%
  melt() %>%
  filter(variable %in% c("pos", "neg"),
         association != "Not found") %>%
  droplevels %>%
  mutate(variable = factor(variable, labels = c("Amyloid", "Non-amyloid")))

for(i in 1L:6){
  levels(ngram_freq_plot[["decoded_name"]]) <- gsub(as.character(i), gr_aa[i, "gr"],
                                                    levels(ngram_freq_plot[["decoded_name"]]))
}

ggplot(ngram_freq_plot, aes(x = decoded_name, y = value)) +
  geom_bar(aes(fill = variable), position = "dodge", stat = "identity") +
  geom_point(data = group_by(ngram_freq_plot, decoded_name)  %>% filter(value == max(value)),
             aes(y = value + 0.004, shape = association), size = 6) +
  scale_fill_manual("", values = c("#d17312", "#04d1b2")) +
  scale_shape_manual("Motif:", breaks = c("Amyloidogenic", "Non-amyloidogenic"), values = c(16, 17, NA)) +
  scale_y_continuous("Frequency") +
  scale_x_discrete("") +
  my_theme +
  theme(panel.grid.major.y = element_line(color = "lightgrey", size = 0.5)) +
  coord_flip()

@

The frequency of important n-grams used by the best-performing 
classifier in amyloid and non-amyloid sequences. The elements of n-grams are 
amino acids encoded using the best-performing reduced amino acid alphabet. 
X represents any amino acid. Dots and triangles 
denote n-grams occurring in motifs found in respectively amyloidogenic and 
non-amyloidogenic sequences~\citep{paz_sequence_2004}.

\end{block}



}
\end{minipage}
\end{beamercolorbox}
\end{column}


%new column ------------------------------------------------------    

\begin{column}{.48\textwidth}
\begin{beamercolorbox}[center,wd=\textwidth]{postercolumn}
\begin{minipage}[T]{.95\textwidth}  
\parbox[t][\columnheight]{\textwidth}
{


\begin{block}{Benchmark results}

\begin{table}[ht]
\centering

\begin{tabular}{ccccc}
  \toprule
Classifier & AUC & MCC & Sens. & Spec. \\ 
  \midrule
AmyloGram & \textbf{0.8972} & \textbf{0.6307} & 0.8658 & 0.7889 \\ 
  \rowcolor{white}PASTA \citep{walsh_pasta_2014} & 0.8550 & 0.4291 & 0.3826 & 0.9519 \\ 
   FoldAmyloid \citep{garbuzynskiy_foldamyloid:_2010} & 0.7351 & 0.4526 & 0.7517 & 0.7185 \\ 
  \rowcolor{white}APPNN \citep{familia_prediction_2015} & 0.8343 & 0.5823 & \textbf{0.8859} & 0.7222 \\ 
   \bottomrule
\end{tabular}
\end{table}

The predictor based on the best-performing alphabet, called AmyloGram, was benchmarked against the most popular tools for the detection of amyloid peptides using an external data set \textit{pep424}.

\end{block}
\vfill


\begin{block}{Experimental validation}

Using AmyloGram we analyzed all 34 peptides from AmyLoad database. 23 peptides were predicted by AmyloGram otherwise than described in AmyloGram. Hexamers were validated experimentally using ThT assay.

<<echo = FALSE,message=FALSE,fig.align='center',fig.width=14,fig.height=7,warning=FALSE>>=

library(dplyr)
library(readODS)
library(reshape2)
library(ggplot2)
library(ggbeeswarm)
library(tidyverse)
library(DT)
library(reshape2)
library(patchwork)

peptydy <- read.csv("data/amyloid_heatmap.csv")
peptydy <- peptydy[1:(nrow(peptydy)-1),]
peptydy <- peptydy %>% mutate(match = ifelse(peptydy[["AmyLoad"]] == peptydy[["ThT"]], "yes", "no"))

peptydy <- peptydy %>% gather("method", "result", 2:4)

peptydy_intensity <- read.csv("data/amyloid_repeats.csv") %>% gather("day_rep", "intensity", 2:16) %>% 
  mutate(day = sapply(strsplit(day_rep, split = "_"), first),
         rep = sapply(strsplit(day_rep, split = "_"), last),
         day = gsub(pattern = "X", replacement = "", x = day)) 

peptydy_intensity_aggr <- group_by(peptydy_intensity, peptides,  day) %>% 
  summarise(intensity = median(intensity))

peptydy_intensity_plot_amyloid <- inner_join(peptydy_intensity, peptydy, by=c("peptides" = "peptide")) %>% 
  filter(method == "AmyLoad") %>% 
  filter(result == "yes") %>% 
  ggplot(aes(x = day, y = intensity, color = rep)) +
  geom_point() +
  facet_wrap(~ peptides, scales = "free_y") +
  theme_bw() +
  xlab("Dzień") +
  ylab("Intensywność") +
  scale_fill_manual(name = "Powtórzenie") +
  theme(text = element_text(size=4),
        strip.text.x = element_text(margin = margin(0, 0, 0, 0, "cm")))

peptydy_intensity_plot_nonamyloid <- inner_join(peptydy_intensity, peptydy, by=c("peptides" = "peptide")) %>% 
  filter(method == "AmyLoad") %>% 
  filter(result == "no") %>% 
  ggplot(aes(x = day, y = intensity, color = rep)) +
  geom_point() +
  facet_wrap(~ peptides, scales = "free_y") +
  theme_bw() +
  xlab("Dzień") +
  ylab("Intensywność") +
  scale_fill_manual(name = "Powtórzenie") +
  theme(text = element_text(size=4),
        strip.text.x = element_text(margin = margin(0, 0, 0, 0, "cm")))

intensity_plot <- inner_join(peptydy_intensity_aggr, peptydy, by=c("peptides" = "peptide")) %>% 
  filter(method %in% c("AmyLoad", "ThT")) %>%
  mutate(result = ifelse(result == "yes", "amyloid", "non-amyloid")) %>% 
  dcast(peptides + day + intensity~ method) %>% 
  group_by(peptides) %>% 
  mutate(norm_intensity = intensity / max(intensity)) %>% 
  ggplot(aes(x=peptides, y=norm_intensity, fill=day)) +
  geom_col(position = "dodge") +
  theme_bw() +
  facet_wrap(~ AmyLoad + ThT, scales = "free", labeller = label_both) +
  theme(text = element_text(size=4)) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 3),
        strip.text.x = element_text(margin = margin(0, 0, 0, 0, "cm")))



ThT_median <- filter(peptydy_intensity, peptides == "THT") %>% 
  pull(intensity) %>% 
  median

peptydy_intensity_casted <- inner_join(peptydy_intensity, peptydy, by=c("peptides" = "peptide")) %>% 
  filter(method %in% c("AmyLoad", "ThT")) %>%
  dcast(peptides + day + intensity~ method) %>% 
  mutate(both = paste0(AmyLoad, ThT)) 


plot_intensities <- function(dat, ymax = NULL){
  ggplot(dat, aes(x = day, y = intensity)) +
  geom_hline(yintercept = ThT_median, color = "red") +
  geom_rect(ymin = 0, ymax = ThT_median*2, 
            xmin = 0, xmax = 6, color = NA, fill = "red", alpha = 0.01) +
  geom_point() +
  facet_wrap(~ peptides) +
  theme_bw() +
  theme(text = element_text(size=15)) +
  xlab("Dzień") +
  scale_y_continuous("Fluorescencja (ThT)", 
                     limits = c(0, ifelse(is.null(ymax), 
                                          max(dat[["intensity"]]),
                                          ymax))) +
  theme(strip.text.x = element_text(margin = margin(0, 0, 0, 0, "cm"))) +
  ggtitle(paste0("AmyLoad: ", dat[["AmyLoad"]][1], "; ThT: ", dat[["ThT"]][1]))
  }

intensities_plots <- lapply(split(peptydy_intensity_casted, peptydy_intensity_casted[["both"]]), 
                            plot_intensities)

intensities_plots_uniform <- lapply(split(peptydy_intensity_casted, peptydy_intensity_casted[["both"]]), 
                                    plot_intensities, ymax = max(peptydy_intensity_casted[["intensity"]]))



intensity_plot_lines <- (intensities_plots_uniform[[1]] +  intensities_plots_uniform[[2]])/(intensities_plots_uniform[[3]] + intensities_plots_uniform[[4]])

intensity_plot_lines

@

15 out of 23 peptides had the same amyloid properties as predicted by AmyloGram.

\end{block}
\vfill


\begin{block}{MspA - new amyloid protein found by AmyloGram}

\begin{figure} 
\includegraphics[width=0.85\columnwidth]{static_figure/mspa.png}
\end{figure}


The whole proteom was analysed in silico using AmyloGram \citep{burdukiewicz_amyloidogenic_2017}. It has found MspA protein (WP\_011449234.1) \citep{christensen_sheaths_2018}, which has several regions of predicted high amyloidogenicity (above the blue, horizontal line). The red vertical line indicates the signal peptide cleavage site position. The experimental studies confirmed protein amyloid features.  


\end{block}
\vfill

\begin{block}{Summary and funding}
Thanks to the simplification of the amino acid alphabet and description of peptides by 
short sub-sequences (n-grams), we were able to create the efficient predictor 
of amyloidogenic sequences called AmyloGram.

\bigskip

Our software is avaible as a web-server: \url{www.smorfland.uni.wroc.pl/shiny/AmyloGram/} and \textbf{R} package: \url{https://cran.r-project.org/package=AmyloGram}.

\small{This research was partially funded by the KNOW Consortium and National Science Center (2015/17/N/NZ2/01845).}

\end{block}
\vfill


 \begin{block}{Bibliography}
  \tiny{
  \bibliographystyle{apalike}
  \bibliography{references}
  }
  \end{block}
  \vfill


}
\end{minipage}
\end{beamercolorbox}
\end{column}
\end{columns}  
\end{frame}
\end{document}